/* tslint:disable */
/* eslint-disable */
/**
 * Enrollment System
 * The enrollment system API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface AdmissionDto
 */
export interface AdmissionDto {
    /**
     * 
     * @type {number}
     * @memberof AdmissionDto
     */
    'admissionID'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof AdmissionDto
     */
    'reportCard': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdmissionDto
     */
    'bCertificate': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdmissionDto
     */
    'Pic': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdmissionDto
     */
    'eForm': boolean;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'IdNum': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'lrn': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'ayCode': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'incomingYlevel': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'studentType': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'FName': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'MName': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'LName': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'age': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'dataOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'placeOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'contactNo': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'gender': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'martialStatus': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'citizenship': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'religion': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'course': string;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof AdmissionDto
     */
    'enrollmentStudentFullName'?: EnrollmentDto;
}
/**
 * 
 * @export
 * @interface CourseDto
 */
export interface CourseDto {
    /**
     * 
     * @type {number}
     * @memberof CourseDto
     */
    'courseID'?: number;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'courseCode': string;
    /**
     * 
     * @type {string}
     * @memberof CourseDto
     */
    'courseDescription': string;
}
/**
 * 
 * @export
 * @interface EnrollmentDto
 */
export interface EnrollmentDto {
    /**
     * 
     * @type {string}
     * @memberof EnrollmentDto
     */
    'enrollmentID'?: string;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'subjectCode'?: SchedulingDto;
    /**
     * 
     * @type {AdmissionDto}
     * @memberof EnrollmentDto
     */
    'studentFullName'?: AdmissionDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'academicYear'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'yearLevel'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'semester'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'course'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'section'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'teacher'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'descriptiveTitle'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'units'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'day'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'day2'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'time'?: SchedulingDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EnrollmentDto
     */
    'time2'?: SchedulingDto;
    /**
     * 
     * @type {ReportandreportsDto}
     * @memberof EnrollmentDto
     */
    'recordsection'?: ReportandreportsDto;
}
/**
 * 
 * @export
 * @interface RefreshDto
 */
export interface RefreshDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshDto
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface ReportandreportsDto
 */
export interface ReportandreportsDto {
    /**
     * 
     * @type {number}
     * @memberof ReportandreportsDto
     */
    'recordsID'?: number;
    /**
     * 
     * @type {SubjectDto}
     * @memberof ReportandreportsDto
     */
    'subject'?: SubjectDto;
    /**
     * 
     * @type {SectionDto}
     * @memberof ReportandreportsDto
     */
    'Section'?: SectionDto;
}
/**
 * 
 * @export
 * @interface SchedulingDto
 */
export interface SchedulingDto {
    /**
     * 
     * @type {string}
     * @memberof SchedulingDto
     */
    'scheduleID'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchedulingDto
     */
    'yearLevel': string;
    /**
     * 
     * @type {SchoolYearDto}
     * @memberof SchedulingDto
     */
    'AcademicYear'?: SchoolYearDto;
    /**
     * 
     * @type {string}
     * @memberof SchedulingDto
     */
    'Semester': string;
    /**
     * 
     * @type {string}
     * @memberof SchedulingDto
     */
    'Day': string;
    /**
     * 
     * @type {string}
     * @memberof SchedulingDto
     */
    'Day2': string;
    /**
     * 
     * @type {string}
     * @memberof SchedulingDto
     */
    'Time': string;
    /**
     * 
     * @type {string}
     * @memberof SchedulingDto
     */
    'Time2': string;
    /**
     * 
     * @type {SubjectDto}
     * @memberof SchedulingDto
     */
    'SubjectCodes'?: SubjectDto;
    /**
     * 
     * @type {SubjectDto}
     * @memberof SchedulingDto
     */
    'DescriptiveTitle'?: SubjectDto;
    /**
     * 
     * @type {CourseDto}
     * @memberof SchedulingDto
     */
    'Courses'?: CourseDto;
    /**
     * 
     * @type {SectionDto}
     * @memberof SchedulingDto
     */
    'Section'?: SectionDto;
    /**
     * 
     * @type {TeacherDto}
     * @memberof SchedulingDto
     */
    'Teachers'?: TeacherDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentSubjectCode'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentacademicYear'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentyearLevel'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentcourse'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentsemester'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentsection'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentTeacher'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentDescriptiveTitle'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentUnits'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentDay'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentTime'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentTime2'?: EnrollmentDto;
    /**
     * 
     * @type {EnrollmentDto}
     * @memberof SchedulingDto
     */
    'enrollmentDay2'?: EnrollmentDto;
}
/**
 * 
 * @export
 * @interface SchoolYearDto
 */
export interface SchoolYearDto {
    /**
     * 
     * @type {string}
     * @memberof SchoolYearDto
     */
    'schoolyearid'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchoolYearDto
     */
    'schoolyear': string;
    /**
     * 
     * @type {SubjectDto}
     * @memberof SchoolYearDto
     */
    'subjectSchoolYear'?: SubjectDto;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof SchoolYearDto
     */
    'schedulingSchoolYear'?: SchedulingDto;
}
/**
 * 
 * @export
 * @interface SectionDto
 */
export interface SectionDto {
    /**
     * 
     * @type {number}
     * @memberof SectionDto
     */
    'sectionID'?: number;
    /**
     * 
     * @type {string}
     * @memberof SectionDto
     */
    'YearLevel': string;
    /**
     * 
     * @type {string}
     * @memberof SectionDto
     */
    'sectionName': string;
    /**
     * 
     * @type {TeacherDto}
     * @memberof SectionDto
     */
    'sectionTeachers'?: TeacherDto;
}
/**
 * 
 * @export
 * @interface SubjectDto
 */
export interface SubjectDto {
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'subjectID'?: string;
    /**
     * 
     * @type {SchoolYearDto}
     * @memberof SubjectDto
     */
    'AYCodes'?: SchoolYearDto;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'SubjectCode': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'DescriptiveTitle': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'Units': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'YearLevel': string;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof SubjectDto
     */
    'schedulingDescriptiveTitle'?: SchedulingDto;
    /**
     * 
     * @type {ReportandreportsDto}
     * @memberof SubjectDto
     */
    'recordsSubjectCode'?: ReportandreportsDto;
}
/**
 * 
 * @export
 * @interface TeacherDto
 */
export interface TeacherDto {
    /**
     * 
     * @type {string}
     * @memberof TeacherDto
     */
    'teacherID'?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherDto
     */
    'FullName': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherDto
     */
    'Degree': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherDto
     */
    'Specialization': string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'FName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'MName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'LName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'contact'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userType': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'refreshToken'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new Admissions
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdmissions: async (admissionDto: AdmissionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionDto' is not null or undefined
            assertParamExists('addAdmissions', 'admissionDto', admissionDto)
            const localVarPath = `/admission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(admissionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Courses
         * @param {CourseDto} courseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourses: async (courseDto: CourseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseDto' is not null or undefined
            assertParamExists('addCourses', 'courseDto', courseDto)
            const localVarPath = `/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Enrollments
         * @param {EnrollmentDto} enrollmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEnrollments: async (enrollmentDto: EnrollmentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enrollmentDto' is not null or undefined
            assertParamExists('addEnrollments', 'enrollmentDto', enrollmentDto)
            const localVarPath = `/enrollment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enrollmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Schedulings
         * @param {SchedulingDto} schedulingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSchedulings: async (schedulingDto: SchedulingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schedulingDto' is not null or undefined
            assertParamExists('addSchedulings', 'schedulingDto', schedulingDto)
            const localVarPath = `/scheduling`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schedulingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new SchoolYears
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSchoolYears: async (schoolYearDto: SchoolYearDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolYearDto' is not null or undefined
            assertParamExists('addSchoolYears', 'schoolYearDto', schoolYearDto)
            const localVarPath = `/schoolyear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schoolYearDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Sections
         * @param {SectionDto} sectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSections: async (sectionDto: SectionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionDto' is not null or undefined
            assertParamExists('addSections', 'sectionDto', sectionDto)
            const localVarPath = `/section`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sectionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Subject
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubject: async (subjectDto: SubjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectDto' is not null or undefined
            assertParamExists('addSubject', 'subjectDto', subjectDto)
            const localVarPath = `/subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Teachers
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeachers: async (teacherDto: TeacherDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherDto' is not null or undefined
            assertParamExists('addTeachers', 'teacherDto', teacherDto)
            const localVarPath = `/teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('addUser', 'userDto', userDto)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmissions: async (admissionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionID' is not null or undefined
            assertParamExists('deleteAdmissions', 'admissionID', admissionID)
            const localVarPath = `/admission/{admissionID}`
                .replace(`{${"admissionID"}}`, encodeURIComponent(String(admissionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Courses by id
         * @param {number} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse: async (courseID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseID' is not null or undefined
            assertParamExists('deleteCourse', 'courseID', courseID)
            const localVarPath = `/course/{courseID}`
                .replace(`{${"courseID"}}`, encodeURIComponent(String(courseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Enrollments by id
         * @param {number} enrollmentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnrollment: async (enrollmentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enrollmentID' is not null or undefined
            assertParamExists('deleteEnrollment', 'enrollmentID', enrollmentID)
            const localVarPath = `/enrollment/{enrollmentID}`
                .replace(`{${"enrollmentID"}}`, encodeURIComponent(String(enrollmentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneSubject: async (subjectID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectID' is not null or undefined
            assertParamExists('deleteOneSubject', 'subjectID', subjectID)
            const localVarPath = `/subject/{subjectID}`
                .replace(`{${"subjectID"}}`, encodeURIComponent(String(subjectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Schedulings by id
         * @param {number} schedulingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduling: async (schedulingID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schedulingID' is not null or undefined
            assertParamExists('deleteScheduling', 'schedulingID', schedulingID)
            const localVarPath = `/scheduling/{SchedulingID}`
                .replace(`{${"SchedulingID"}}`, encodeURIComponent(String(schedulingID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete SchoolYears by id
         * @param {number} schoolyearid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchoolYear: async (schoolyearid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolyearid' is not null or undefined
            assertParamExists('deleteSchoolYear', 'schoolyearid', schoolyearid)
            const localVarPath = `/schoolyear/{schoolyearid}`
                .replace(`{${"schoolyearid"}}`, encodeURIComponent(String(schoolyearid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Sections by id
         * @param {number} sectionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSection: async (sectionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionID' is not null or undefined
            assertParamExists('deleteSection', 'sectionID', sectionID)
            const localVarPath = `/section/{SectionID}`
                .replace(`{${"SectionID"}}`, encodeURIComponent(String(sectionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacher: async (teacherID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherID' is not null or undefined
            assertParamExists('deleteTeacher', 'teacherID', teacherID)
            const localVarPath = `/teacher/{teacherID}`
                .replace(`{${"teacherID"}}`, encodeURIComponent(String(teacherID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmission: async (admissionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionID' is not null or undefined
            assertParamExists('getAdmission', 'admissionID', admissionID)
            const localVarPath = `/admission/{admissionID}`
                .replace(`{${"admissionID"}}`, encodeURIComponent(String(admissionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Admissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmissions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Courses by id
         * @param {number} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseById: async (courseID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseID' is not null or undefined
            assertParamExists('getCourseById', 'courseID', courseID)
            const localVarPath = `/course/{courseID}`
                .replace(`{${"courseID"}}`, encodeURIComponent(String(courseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/course`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Enrollments by id
         * @param {number} enrollmentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnrollment: async (enrollmentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enrollmentID' is not null or undefined
            assertParamExists('getEnrollment', 'enrollmentID', enrollmentID)
            const localVarPath = `/enrollment/{enrollmentID}`
                .replace(`{${"enrollmentID"}}`, encodeURIComponent(String(enrollmentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Enrollments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnrollments: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/enrollment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportCourses: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reportandreports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Schedulings by id
         * @param {number} schedulingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduling: async (schedulingID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schedulingID' is not null or undefined
            assertParamExists('getScheduling', 'schedulingID', schedulingID)
            const localVarPath = `/scheduling/{SchedulingID}`
                .replace(`{${"SchedulingID"}}`, encodeURIComponent(String(schedulingID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Schedulings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedulings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/scheduling`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get SchoolYears by id
         * @param {number} schoolyearid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolYear: async (schoolyearid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolyearid' is not null or undefined
            assertParamExists('getSchoolYear', 'schoolyearid', schoolyearid)
            const localVarPath = `/schoolyear/{schoolyearid}`
                .replace(`{${"schoolyearid"}}`, encodeURIComponent(String(schoolyearid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all SchoolYears
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolYears: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schoolyear`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Sections by id
         * @param {number} sectionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSection: async (sectionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionID' is not null or undefined
            assertParamExists('getSection', 'sectionID', sectionID)
            const localVarPath = `/section/{SectionID}`
                .replace(`{${"SectionID"}}`, encodeURIComponent(String(sectionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Sections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSections: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/section`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubject: async (subjectID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectID' is not null or undefined
            assertParamExists('getSubject', 'subjectID', subjectID)
            const localVarPath = `/subject/{subjectID}`
                .replace(`{${"subjectID"}}`, encodeURIComponent(String(subjectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacher: async (teacherID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherID' is not null or undefined
            assertParamExists('getTeacher', 'teacherID', teacherID)
            const localVarPath = `/teacher/{teacherID}`
                .replace(`{${"teacherID"}}`, encodeURIComponent(String(teacherID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (username: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('login', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('login', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshDto: RefreshDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshDto' is not null or undefined
            assertParamExists('refreshToken', 'refreshDto', refreshDto)
            const localVarPath = `/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('register', 'userDto', userDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Admission by id
         * @param {number} admissionID 
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmissions: async (admissionID: number, admissionDto: AdmissionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionID' is not null or undefined
            assertParamExists('updateAdmissions', 'admissionID', admissionID)
            // verify required parameter 'admissionDto' is not null or undefined
            assertParamExists('updateAdmissions', 'admissionDto', admissionDto)
            const localVarPath = `/admission/{admissionID}`
                .replace(`{${"admissionID"}}`, encodeURIComponent(String(admissionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(admissionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Enrollments by id
         * @param {number} enrollmentID 
         * @param {EnrollmentDto} enrollmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnrollment: async (enrollmentID: number, enrollmentDto: EnrollmentDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enrollmentID' is not null or undefined
            assertParamExists('updateEnrollment', 'enrollmentID', enrollmentID)
            // verify required parameter 'enrollmentDto' is not null or undefined
            assertParamExists('updateEnrollment', 'enrollmentDto', enrollmentDto)
            const localVarPath = `/enrollment/{enrollmentID}`
                .replace(`{${"enrollmentID"}}`, encodeURIComponent(String(enrollmentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enrollmentDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Schedulings by id
         * @param {number} schedulingID 
         * @param {SchedulingDto} schedulingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduling: async (schedulingID: number, schedulingDto: SchedulingDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schedulingID' is not null or undefined
            assertParamExists('updateScheduling', 'schedulingID', schedulingID)
            // verify required parameter 'schedulingDto' is not null or undefined
            assertParamExists('updateScheduling', 'schedulingDto', schedulingDto)
            const localVarPath = `/scheduling/{SchedulingID}`
                .replace(`{${"SchedulingID"}}`, encodeURIComponent(String(schedulingID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schedulingDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update SchoolYears by id
         * @param {number} schoolyearid 
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchoolYear: async (schoolyearid: number, schoolYearDto: SchoolYearDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'schoolyearid' is not null or undefined
            assertParamExists('updateSchoolYear', 'schoolyearid', schoolyearid)
            // verify required parameter 'schoolYearDto' is not null or undefined
            assertParamExists('updateSchoolYear', 'schoolYearDto', schoolYearDto)
            const localVarPath = `/schoolyear/{schoolyearid}`
                .replace(`{${"schoolyearid"}}`, encodeURIComponent(String(schoolyearid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(schoolYearDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Sections by id
         * @param {number} sectionID 
         * @param {SectionDto} sectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSection: async (sectionID: number, sectionDto: SectionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sectionID' is not null or undefined
            assertParamExists('updateSection', 'sectionID', sectionID)
            // verify required parameter 'sectionDto' is not null or undefined
            assertParamExists('updateSection', 'sectionDto', sectionDto)
            const localVarPath = `/section/{SectionID}`
                .replace(`{${"SectionID"}}`, encodeURIComponent(String(sectionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sectionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Subjects by id
         * @param {number} subjectID 
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubject: async (subjectID: number, subjectDto: SubjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectID' is not null or undefined
            assertParamExists('updateSubject', 'subjectID', subjectID)
            // verify required parameter 'subjectDto' is not null or undefined
            assertParamExists('updateSubject', 'subjectDto', subjectDto)
            const localVarPath = `/subject/{subjectID}`
                .replace(`{${"subjectID"}}`, encodeURIComponent(String(subjectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Teachers by id
         * @param {number} teacherID 
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeachers: async (teacherID: number, teacherDto: TeacherDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherID' is not null or undefined
            assertParamExists('updateTeachers', 'teacherID', teacherID)
            // verify required parameter 'teacherDto' is not null or undefined
            assertParamExists('updateTeachers', 'teacherDto', teacherDto)
            const localVarPath = `/teacher/{teacherID}`
                .replace(`{${"teacherID"}}`, encodeURIComponent(String(teacherID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('updateUser', 'userDto', userDto)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Courses by id
         * @param {number} courseID 
         * @param {CourseDto} courseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatecourse: async (courseID: number, courseDto: CourseDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'courseID' is not null or undefined
            assertParamExists('updatecourse', 'courseID', courseID)
            // verify required parameter 'courseDto' is not null or undefined
            assertParamExists('updatecourse', 'courseDto', courseDto)
            const localVarPath = `/course/{courseID}`
                .replace(`{${"courseID"}}`, encodeURIComponent(String(courseID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(courseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new Admissions
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAdmissions(admissionDto: AdmissionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAdmissions(admissionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Courses
         * @param {CourseDto} courseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCourses(courseDto: CourseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCourses(courseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Enrollments
         * @param {EnrollmentDto} enrollmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEnrollments(enrollmentDto: EnrollmentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnrollmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEnrollments(enrollmentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Schedulings
         * @param {SchedulingDto} schedulingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSchedulings(schedulingDto: SchedulingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSchedulings(schedulingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new SchoolYears
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSchoolYears(schoolYearDto: SchoolYearDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYearDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSchoolYears(schoolYearDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Sections
         * @param {SectionDto} sectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSections(sectionDto: SectionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSections(sectionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Subject
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSubject(subjectDto: SubjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSubject(subjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Teachers
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTeachers(teacherDto: TeacherDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTeachers(teacherDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdmissions(admissionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmissions(admissionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Courses by id
         * @param {number} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCourse(courseID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCourse(courseID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Enrollments by id
         * @param {number} enrollmentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEnrollment(enrollmentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnrollmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnrollment(enrollmentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneSubject(subjectID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneSubject(subjectID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Schedulings by id
         * @param {number} schedulingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteScheduling(schedulingID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteScheduling(schedulingID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete SchoolYears by id
         * @param {number} schoolyearid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSchoolYear(schoolyearid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYearDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSchoolYear(schoolyearid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Sections by id
         * @param {number} sectionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSection(sectionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSection(sectionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeacher(teacherID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeacher(teacherID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmission(admissionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmission(admissionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Admissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmissions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmissions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSubjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Courses by id
         * @param {number} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourseById(courseID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourseById(courseID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCourses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCourses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Enrollments by id
         * @param {number} enrollmentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnrollment(enrollmentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnrollmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnrollment(enrollmentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Enrollments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnrollments(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnrollmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEnrollments(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportCourses(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportandreportsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportCourses(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Schedulings by id
         * @param {number} schedulingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduling(schedulingID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduling(schedulingID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Schedulings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchedulings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchedulings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get SchoolYears by id
         * @param {number} schoolyearid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchoolYear(schoolyearid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYearDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchoolYear(schoolyearid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all SchoolYears
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchoolYears(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYearDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchoolYears(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Sections by id
         * @param {number} sectionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSection(sectionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSection(sectionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Sections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSections(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSections(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubject(subjectID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubject(subjectID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeacher(teacherID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeacher(teacherID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeachers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeachers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(username: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Admission by id
         * @param {number} admissionID 
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdmissions(admissionID: number, admissionDto: AdmissionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdmissions(admissionID, admissionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Enrollments by id
         * @param {number} enrollmentID 
         * @param {EnrollmentDto} enrollmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnrollment(enrollmentID: number, enrollmentDto: EnrollmentDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnrollmentDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnrollment(enrollmentID, enrollmentDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Schedulings by id
         * @param {number} schedulingID 
         * @param {SchedulingDto} schedulingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduling(schedulingID: number, schedulingDto: SchedulingDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulingDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduling(schedulingID, schedulingDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update SchoolYears by id
         * @param {number} schoolyearid 
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchoolYear(schoolyearid: number, schoolYearDto: SchoolYearDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchoolYearDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchoolYear(schoolyearid, schoolYearDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Sections by id
         * @param {number} sectionID 
         * @param {SectionDto} sectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSection(sectionID: number, sectionDto: SectionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SectionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSection(sectionID, sectionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Subjects by id
         * @param {number} subjectID 
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubject(subjectID: number, subjectDto: SubjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubject(subjectID, subjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Teachers by id
         * @param {number} teacherID 
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeachers(teacherID: number, teacherDto: TeacherDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeachers(teacherID, teacherDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Courses by id
         * @param {number} courseID 
         * @param {CourseDto} courseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatecourse(courseID: number, courseDto: CourseDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatecourse(courseID, courseDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new Admissions
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdmissions(admissionDto: AdmissionDto, options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.addAdmissions(admissionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Courses
         * @param {CourseDto} courseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCourses(courseDto: CourseDto, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.addCourses(courseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Enrollments
         * @param {EnrollmentDto} enrollmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEnrollments(enrollmentDto: EnrollmentDto, options?: any): AxiosPromise<EnrollmentDto> {
            return localVarFp.addEnrollments(enrollmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Schedulings
         * @param {SchedulingDto} schedulingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSchedulings(schedulingDto: SchedulingDto, options?: any): AxiosPromise<SchedulingDto> {
            return localVarFp.addSchedulings(schedulingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new SchoolYears
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSchoolYears(schoolYearDto: SchoolYearDto, options?: any): AxiosPromise<SchoolYearDto> {
            return localVarFp.addSchoolYears(schoolYearDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Sections
         * @param {SectionDto} sectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSections(sectionDto: SectionDto, options?: any): AxiosPromise<SectionDto> {
            return localVarFp.addSections(sectionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Subject
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubject(subjectDto: SubjectDto, options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.addSubject(subjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Teachers
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeachers(teacherDto: TeacherDto, options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.addTeachers(teacherDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.addUser(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmissions(admissionID: number, options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.deleteAdmissions(admissionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Courses by id
         * @param {number} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCourse(courseID: number, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.deleteCourse(courseID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Enrollments by id
         * @param {number} enrollmentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnrollment(enrollmentID: number, options?: any): AxiosPromise<EnrollmentDto> {
            return localVarFp.deleteEnrollment(enrollmentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneSubject(subjectID: number, options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.deleteOneSubject(subjectID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Schedulings by id
         * @param {number} schedulingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteScheduling(schedulingID: number, options?: any): AxiosPromise<SchedulingDto> {
            return localVarFp.deleteScheduling(schedulingID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete SchoolYears by id
         * @param {number} schoolyearid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSchoolYear(schoolyearid: number, options?: any): AxiosPromise<SchoolYearDto> {
            return localVarFp.deleteSchoolYear(schoolyearid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Sections by id
         * @param {number} sectionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSection(sectionID: number, options?: any): AxiosPromise<SectionDto> {
            return localVarFp.deleteSection(sectionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacher(teacherID: number, options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.deleteTeacher(teacherID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmission(admissionID: number, options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.getAdmission(admissionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Admissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmissions(options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.getAdmissions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubjects(options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.getAllSubjects(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Courses by id
         * @param {number} courseID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourseById(courseID: number, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.getCourseById(courseID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCourses(options?: any): AxiosPromise<CourseDto> {
            return localVarFp.getCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Enrollments by id
         * @param {number} enrollmentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnrollment(enrollmentID: number, options?: any): AxiosPromise<EnrollmentDto> {
            return localVarFp.getEnrollment(enrollmentID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Enrollments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnrollments(options?: any): AxiosPromise<EnrollmentDto> {
            return localVarFp.getEnrollments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Courses
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportCourses(options?: any): AxiosPromise<ReportandreportsDto> {
            return localVarFp.getReportCourses(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Schedulings by id
         * @param {number} schedulingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduling(schedulingID: number, options?: any): AxiosPromise<SchedulingDto> {
            return localVarFp.getScheduling(schedulingID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Schedulings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedulings(options?: any): AxiosPromise<SchedulingDto> {
            return localVarFp.getSchedulings(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get SchoolYears by id
         * @param {number} schoolyearid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolYear(schoolyearid: number, options?: any): AxiosPromise<SchoolYearDto> {
            return localVarFp.getSchoolYear(schoolyearid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all SchoolYears
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolYears(options?: any): AxiosPromise<SchoolYearDto> {
            return localVarFp.getSchoolYears(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Sections by id
         * @param {number} sectionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSection(sectionID: number, options?: any): AxiosPromise<SectionDto> {
            return localVarFp.getSection(sectionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Sections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSections(options?: any): AxiosPromise<SectionDto> {
            return localVarFp.getSections(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubject(subjectID: number, options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.getSubject(subjectID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacher(teacherID: number, options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.getTeacher(teacherID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachers(options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.getTeachers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username: string, password: string, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.login(username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshDto: RefreshDto, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.refreshToken(refreshDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.register(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Admission by id
         * @param {number} admissionID 
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmissions(admissionID: number, admissionDto: AdmissionDto, options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.updateAdmissions(admissionID, admissionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Enrollments by id
         * @param {number} enrollmentID 
         * @param {EnrollmentDto} enrollmentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnrollment(enrollmentID: number, enrollmentDto: EnrollmentDto, options?: any): AxiosPromise<EnrollmentDto> {
            return localVarFp.updateEnrollment(enrollmentID, enrollmentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Schedulings by id
         * @param {number} schedulingID 
         * @param {SchedulingDto} schedulingDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduling(schedulingID: number, schedulingDto: SchedulingDto, options?: any): AxiosPromise<SchedulingDto> {
            return localVarFp.updateScheduling(schedulingID, schedulingDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update SchoolYears by id
         * @param {number} schoolyearid 
         * @param {SchoolYearDto} schoolYearDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchoolYear(schoolyearid: number, schoolYearDto: SchoolYearDto, options?: any): AxiosPromise<SchoolYearDto> {
            return localVarFp.updateSchoolYear(schoolyearid, schoolYearDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Sections by id
         * @param {number} sectionID 
         * @param {SectionDto} sectionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSection(sectionID: number, sectionDto: SectionDto, options?: any): AxiosPromise<SectionDto> {
            return localVarFp.updateSection(sectionID, sectionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Subjects by id
         * @param {number} subjectID 
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubject(subjectID: number, subjectDto: SubjectDto, options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.updateSubject(subjectID, subjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Teachers by id
         * @param {number} teacherID 
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeachers(teacherID: number, teacherDto: TeacherDto, options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.updateTeachers(teacherID, teacherDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: number, userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updateUser(id, userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Courses by id
         * @param {number} courseID 
         * @param {CourseDto} courseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatecourse(courseID: number, courseDto: CourseDto, options?: any): AxiosPromise<CourseDto> {
            return localVarFp.updatecourse(courseID, courseDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add new Admissions
     * @param {AdmissionDto} admissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAdmissions(admissionDto: AdmissionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addAdmissions(admissionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Courses
     * @param {CourseDto} courseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCourses(courseDto: CourseDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addCourses(courseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Enrollments
     * @param {EnrollmentDto} enrollmentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addEnrollments(enrollmentDto: EnrollmentDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addEnrollments(enrollmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Schedulings
     * @param {SchedulingDto} schedulingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSchedulings(schedulingDto: SchedulingDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSchedulings(schedulingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new SchoolYears
     * @param {SchoolYearDto} schoolYearDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSchoolYears(schoolYearDto: SchoolYearDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSchoolYears(schoolYearDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Sections
     * @param {SectionDto} sectionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSections(sectionDto: SectionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSections(sectionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Subject
     * @param {SubjectDto} subjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSubject(subjectDto: SubjectDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSubject(subjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Teachers
     * @param {TeacherDto} teacherDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addTeachers(teacherDto: TeacherDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addTeachers(teacherDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new user
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUser(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addUser(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Admissions by id
     * @param {number} admissionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAdmissions(admissionID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAdmissions(admissionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Courses by id
     * @param {number} courseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCourse(courseID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCourse(courseID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Enrollments by id
     * @param {number} enrollmentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteEnrollment(enrollmentID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteEnrollment(enrollmentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Subjects by id
     * @param {number} subjectID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteOneSubject(subjectID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteOneSubject(subjectID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Schedulings by id
     * @param {number} schedulingID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteScheduling(schedulingID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteScheduling(schedulingID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete SchoolYears by id
     * @param {number} schoolyearid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSchoolYear(schoolyearid: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSchoolYear(schoolyearid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Sections by id
     * @param {number} sectionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSection(sectionID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteSection(sectionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Teachers by id
     * @param {number} teacherID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTeacher(teacherID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTeacher(teacherID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete user by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Admissions by id
     * @param {number} admissionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmission(admissionID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmission(admissionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Admissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmissions(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmissions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllSubjects(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllSubjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Courses by id
     * @param {number} courseID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCourseById(courseID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCourseById(courseID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCourses(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Enrollments by id
     * @param {number} enrollmentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEnrollment(enrollmentID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEnrollment(enrollmentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Enrollments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEnrollments(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getEnrollments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Courses
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getReportCourses(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getReportCourses(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Schedulings by id
     * @param {number} schedulingID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getScheduling(schedulingID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getScheduling(schedulingID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Schedulings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSchedulings(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSchedulings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get SchoolYears by id
     * @param {number} schoolyearid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSchoolYear(schoolyearid: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSchoolYear(schoolyearid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all SchoolYears
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSchoolYears(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSchoolYears(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Sections by id
     * @param {number} sectionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSection(sectionID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSection(sectionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Sections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSections(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSections(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subjects by id
     * @param {number} subjectID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubject(subjectID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubject(subjectID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Teachers by id
     * @param {number} teacherID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTeacher(teacherID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTeacher(teacherID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTeachers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTeachers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login User
     * @param {string} username 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(username: string, password: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshToken(refreshDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Admission by id
     * @param {number} admissionID 
     * @param {AdmissionDto} admissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAdmissions(admissionID: number, admissionDto: AdmissionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAdmissions(admissionID, admissionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Enrollments by id
     * @param {number} enrollmentID 
     * @param {EnrollmentDto} enrollmentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEnrollment(enrollmentID: number, enrollmentDto: EnrollmentDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateEnrollment(enrollmentID, enrollmentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Schedulings by id
     * @param {number} schedulingID 
     * @param {SchedulingDto} schedulingDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateScheduling(schedulingID: number, schedulingDto: SchedulingDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateScheduling(schedulingID, schedulingDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update SchoolYears by id
     * @param {number} schoolyearid 
     * @param {SchoolYearDto} schoolYearDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSchoolYear(schoolyearid: number, schoolYearDto: SchoolYearDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSchoolYear(schoolyearid, schoolYearDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Sections by id
     * @param {number} sectionID 
     * @param {SectionDto} sectionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSection(sectionID: number, sectionDto: SectionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSection(sectionID, sectionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Subjects by id
     * @param {number} subjectID 
     * @param {SubjectDto} subjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSubject(subjectID: number, subjectDto: SubjectDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSubject(subjectID, subjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Teachers by id
     * @param {number} teacherID 
     * @param {TeacherDto} teacherDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTeachers(teacherID: number, teacherDto: TeacherDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateTeachers(teacherID, teacherDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user by id
     * @param {number} id 
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(id: number, userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUser(id, userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Courses by id
     * @param {number} courseID 
     * @param {CourseDto} courseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatecourse(courseID: number, courseDto: CourseDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatecourse(courseID, courseDto, options).then((request) => request(this.axios, this.basePath));
    }
}


