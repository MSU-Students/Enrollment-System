/* tslint:disable */
/* eslint-disable */
/**
 * Enrollment System
 * The enrollment system API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface AdmissionDto
 */
export interface AdmissionDto {
    /**
     * 
     * @type {boolean}
     * @memberof AdmissionDto
     */
    'reportCard': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdmissionDto
     */
    'bCertificate': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdmissionDto
     */
    'Pic': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdmissionDto
     */
    'eForm': boolean;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'IdNum': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'lrn': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'ayCode': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'incomingYlevel': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'studentType': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'FName': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'MName': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'LName': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'age': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'dataOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'placeOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'contactNo': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'gender': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'martialStatus': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'citizenship': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'religion': string;
    /**
     * 
     * @type {string}
     * @memberof AdmissionDto
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface RefreshDto
 */
export interface RefreshDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshDto
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface RoomDto
 */
export interface RoomDto {
    /**
     * 
     * @type {string}
     * @memberof RoomDto
     */
    'Room': string;
    /**
     * 
     * @type {string}
     * @memberof RoomDto
     */
    'Description': string;
    /**
     * 
     * @type {string}
     * @memberof RoomDto
     */
    'Status': string;
}
/**
 * 
 * @export
 * @interface ScheduleDto
 */
export interface ScheduleDto {
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'SubjectCode': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'DescriptiveTitle': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'Units': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'Day': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'Day2': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'Time': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'Time2': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'Teacher': string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleDto
     */
    'Room': string;
}
/**
 * 
 * @export
 * @interface SubjectDto
 */
export interface SubjectDto {
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'AYCode': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'YearLevel': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'SubjectCode': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'DescriptiveTitle': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'Prerequisite': string;
    /**
     * 
     * @type {string}
     * @memberof SubjectDto
     */
    'Units': string;
}
/**
 * 
 * @export
 * @interface TeacherDto
 */
export interface TeacherDto {
    /**
     * 
     * @type {string}
     * @memberof TeacherDto
     */
    'FullName': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherDto
     */
    'Degree': string;
    /**
     * 
     * @type {string}
     * @memberof TeacherDto
     */
    'Specialization': string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'FName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'MName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'LName': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'contact'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'userType': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'refreshToken'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new Admissions
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdmissions: async (admissionDto: AdmissionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionDto' is not null or undefined
            assertParamExists('addAdmissions', 'admissionDto', admissionDto)
            const localVarPath = `/admission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(admissionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Rooms
         * @param {RoomDto} roomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRooms: async (roomDto: RoomDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomDto' is not null or undefined
            assertParamExists('addRooms', 'roomDto', roomDto)
            const localVarPath = `/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Schedule
         * @param {ScheduleDto} scheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSchedule: async (scheduleDto: ScheduleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleDto' is not null or undefined
            assertParamExists('addSchedule', 'scheduleDto', scheduleDto)
            const localVarPath = `/schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Subject
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubject: async (subjectDto: SubjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectDto' is not null or undefined
            assertParamExists('addSubject', 'subjectDto', subjectDto)
            const localVarPath = `/subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Teachers
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeachers: async (teacherDto: TeacherDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherDto' is not null or undefined
            assertParamExists('addTeachers', 'teacherDto', teacherDto)
            const localVarPath = `/teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('addUser', 'userDto', userDto)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmissions: async (admissionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionID' is not null or undefined
            assertParamExists('deleteAdmissions', 'admissionID', admissionID)
            const localVarPath = `/admission/{admissionID}`
                .replace(`{${"admissionID"}}`, encodeURIComponent(String(admissionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Schedules by id
         * @param {number} scheduleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneSchedule: async (scheduleID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleID' is not null or undefined
            assertParamExists('deleteOneSchedule', 'scheduleID', scheduleID)
            const localVarPath = `/schedule/{scheduleID}`
                .replace(`{${"scheduleID"}}`, encodeURIComponent(String(scheduleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneSubject: async (subjectID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectID' is not null or undefined
            assertParamExists('deleteOneSubject', 'subjectID', subjectID)
            const localVarPath = `/subject/{subjectID}`
                .replace(`{${"subjectID"}}`, encodeURIComponent(String(subjectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Rooms by id
         * @param {number} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom: async (roomID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomID' is not null or undefined
            assertParamExists('deleteRoom', 'roomID', roomID)
            const localVarPath = `/room/{roomID}`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacher: async (teacherID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherID' is not null or undefined
            assertParamExists('deleteTeacher', 'teacherID', teacherID)
            const localVarPath = `/teacher/{teacherID}`
                .replace(`{${"teacherID"}}`, encodeURIComponent(String(teacherID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmission: async (admissionID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionID' is not null or undefined
            assertParamExists('getAdmission', 'admissionID', admissionID)
            const localVarPath = `/admission/{admissionID}`
                .replace(`{${"admissionID"}}`, encodeURIComponent(String(admissionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Admissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmissions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admission`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Schedules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedules: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/schedule`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subject`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Rooms by id
         * @param {number} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom: async (roomID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomID' is not null or undefined
            assertParamExists('getRoom', 'roomID', roomID)
            const localVarPath = `/room/{roomID}`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRooms: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Schedules by id
         * @param {number} scheduleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule: async (scheduleID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleID' is not null or undefined
            assertParamExists('getSchedule', 'scheduleID', scheduleID)
            const localVarPath = `/schedule/{scheduleID}`
                .replace(`{${"scheduleID"}}`, encodeURIComponent(String(scheduleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubject: async (subjectID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectID' is not null or undefined
            assertParamExists('getSubject', 'subjectID', subjectID)
            const localVarPath = `/subject/{subjectID}`
                .replace(`{${"subjectID"}}`, encodeURIComponent(String(subjectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacher: async (teacherID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherID' is not null or undefined
            assertParamExists('getTeacher', 'teacherID', teacherID)
            const localVarPath = `/teacher/{teacherID}`
                .replace(`{${"teacherID"}}`, encodeURIComponent(String(teacherID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/teacher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (username: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('login', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('login', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshDto: RefreshDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshDto' is not null or undefined
            assertParamExists('refreshToken', 'refreshDto', refreshDto)
            const localVarPath = `/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('register', 'userDto', userDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Admission by id
         * @param {number} admissionID 
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmissions: async (admissionID: number, admissionDto: AdmissionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'admissionID' is not null or undefined
            assertParamExists('updateAdmissions', 'admissionID', admissionID)
            // verify required parameter 'admissionDto' is not null or undefined
            assertParamExists('updateAdmissions', 'admissionDto', admissionDto)
            const localVarPath = `/admission/{admissionID}`
                .replace(`{${"admissionID"}}`, encodeURIComponent(String(admissionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(admissionDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Rooms by id
         * @param {number} roomID 
         * @param {RoomDto} roomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoom: async (roomID: number, roomDto: RoomDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomID' is not null or undefined
            assertParamExists('updateRoom', 'roomID', roomID)
            // verify required parameter 'roomDto' is not null or undefined
            assertParamExists('updateRoom', 'roomDto', roomDto)
            const localVarPath = `/room/{roomID}`
                .replace(`{${"roomID"}}`, encodeURIComponent(String(roomID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(roomDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Schedules by id
         * @param {number} scheduleID 
         * @param {ScheduleDto} scheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule: async (scheduleID: number, scheduleDto: ScheduleDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scheduleID' is not null or undefined
            assertParamExists('updateSchedule', 'scheduleID', scheduleID)
            // verify required parameter 'scheduleDto' is not null or undefined
            assertParamExists('updateSchedule', 'scheduleDto', scheduleDto)
            const localVarPath = `/schedule/{scheduleID}`
                .replace(`{${"scheduleID"}}`, encodeURIComponent(String(scheduleID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scheduleDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Subjects by id
         * @param {number} subjectID 
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubject: async (subjectID: number, subjectDto: SubjectDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subjectID' is not null or undefined
            assertParamExists('updateSubject', 'subjectID', subjectID)
            // verify required parameter 'subjectDto' is not null or undefined
            assertParamExists('updateSubject', 'subjectDto', subjectDto)
            const localVarPath = `/subject/{subjectID}`
                .replace(`{${"subjectID"}}`, encodeURIComponent(String(subjectID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subjectDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Teachers by id
         * @param {number} teacherID 
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeachers: async (teacherID: number, teacherDto: TeacherDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'teacherID' is not null or undefined
            assertParamExists('updateTeachers', 'teacherID', teacherID)
            // verify required parameter 'teacherDto' is not null or undefined
            assertParamExists('updateTeachers', 'teacherDto', teacherDto)
            const localVarPath = `/teacher/{teacherID}`
                .replace(`{${"teacherID"}}`, encodeURIComponent(String(teacherID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(teacherDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('updateUser', 'userDto', userDto)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new Admissions
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAdmissions(admissionDto: AdmissionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAdmissions(admissionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Rooms
         * @param {RoomDto} roomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRooms(roomDto: RoomDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRooms(roomDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Schedule
         * @param {ScheduleDto} scheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSchedule(scheduleDto: ScheduleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSchedule(scheduleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Subject
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSubject(subjectDto: SubjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSubject(subjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Teachers
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTeachers(teacherDto: TeacherDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTeachers(teacherDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdmissions(admissionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmissions(admissionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Schedules by id
         * @param {number} scheduleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneSchedule(scheduleID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneSchedule(scheduleID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOneSubject(subjectID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOneSubject(subjectID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Rooms by id
         * @param {number} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRoom(roomID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRoom(roomID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTeacher(teacherID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTeacher(teacherID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmission(admissionID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmission(admissionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Admissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmissions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmissions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Schedules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSchedules(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSchedules(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSubjects(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSubjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Rooms by id
         * @param {number} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoom(roomID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoom(roomID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRooms(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRooms(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Schedules by id
         * @param {number} scheduleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSchedule(scheduleID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSchedule(scheduleID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubject(subjectID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubject(subjectID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeacher(teacherID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeacher(teacherID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeachers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTeachers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(username: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Admission by id
         * @param {number} admissionID 
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAdmissions(admissionID: number, admissionDto: AdmissionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdmissionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAdmissions(admissionID, admissionDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Rooms by id
         * @param {number} roomID 
         * @param {RoomDto} roomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRoom(roomID: number, roomDto: RoomDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoomDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoom(roomID, roomDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Schedules by id
         * @param {number} scheduleID 
         * @param {ScheduleDto} scheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchedule(scheduleID: number, scheduleDto: ScheduleDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(scheduleID, scheduleDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Subjects by id
         * @param {number} subjectID 
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubject(subjectID: number, subjectDto: SubjectDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubjectDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubject(subjectID, subjectDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Teachers by id
         * @param {number} teacherID 
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTeachers(teacherID: number, teacherDto: TeacherDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeacherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTeachers(teacherID, teacherDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new Admissions
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAdmissions(admissionDto: AdmissionDto, options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.addAdmissions(admissionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Rooms
         * @param {RoomDto} roomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRooms(roomDto: RoomDto, options?: any): AxiosPromise<RoomDto> {
            return localVarFp.addRooms(roomDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Schedule
         * @param {ScheduleDto} scheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSchedule(scheduleDto: ScheduleDto, options?: any): AxiosPromise<ScheduleDto> {
            return localVarFp.addSchedule(scheduleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Subject
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubject(subjectDto: SubjectDto, options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.addSubject(subjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Teachers
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTeachers(teacherDto: TeacherDto, options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.addTeachers(teacherDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.addUser(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmissions(admissionID: number, options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.deleteAdmissions(admissionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Schedules by id
         * @param {number} scheduleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneSchedule(scheduleID: number, options?: any): AxiosPromise<ScheduleDto> {
            return localVarFp.deleteOneSchedule(scheduleID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOneSubject(subjectID: number, options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.deleteOneSubject(subjectID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Rooms by id
         * @param {number} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRoom(roomID: number, options?: any): AxiosPromise<RoomDto> {
            return localVarFp.deleteRoom(roomID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeacher(teacherID: number, options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.deleteTeacher(teacherID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Admissions by id
         * @param {number} admissionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmission(admissionID: number, options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.getAdmission(admissionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Admissions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmissions(options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.getAdmissions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Schedules
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSchedules(options?: any): AxiosPromise<ScheduleDto> {
            return localVarFp.getAllSchedules(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Subjects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSubjects(options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.getAllSubjects(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Rooms by id
         * @param {number} roomID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoom(roomID: number, options?: any): AxiosPromise<RoomDto> {
            return localVarFp.getRoom(roomID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Rooms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRooms(options?: any): AxiosPromise<RoomDto> {
            return localVarFp.getRooms(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Schedules by id
         * @param {number} scheduleID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchedule(scheduleID: number, options?: any): AxiosPromise<ScheduleDto> {
            return localVarFp.getSchedule(scheduleID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Subjects by id
         * @param {number} subjectID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubject(subjectID: number, options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.getSubject(subjectID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Teachers by id
         * @param {number} teacherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacher(teacherID: number, options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.getTeacher(teacherID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Teachers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachers(options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.getTeachers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username: string, password: string, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.login(username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshDto: RefreshDto, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.refreshToken(refreshDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.register(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Admission by id
         * @param {number} admissionID 
         * @param {AdmissionDto} admissionDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAdmissions(admissionID: number, admissionDto: AdmissionDto, options?: any): AxiosPromise<AdmissionDto> {
            return localVarFp.updateAdmissions(admissionID, admissionDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Rooms by id
         * @param {number} roomID 
         * @param {RoomDto} roomDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRoom(roomID: number, roomDto: RoomDto, options?: any): AxiosPromise<RoomDto> {
            return localVarFp.updateRoom(roomID, roomDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Schedules by id
         * @param {number} scheduleID 
         * @param {ScheduleDto} scheduleDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(scheduleID: number, scheduleDto: ScheduleDto, options?: any): AxiosPromise<ScheduleDto> {
            return localVarFp.updateSchedule(scheduleID, scheduleDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Subjects by id
         * @param {number} subjectID 
         * @param {SubjectDto} subjectDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubject(subjectID: number, subjectDto: SubjectDto, options?: any): AxiosPromise<SubjectDto> {
            return localVarFp.updateSubject(subjectID, subjectDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Teachers by id
         * @param {number} teacherID 
         * @param {TeacherDto} teacherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTeachers(teacherID: number, teacherDto: TeacherDto, options?: any): AxiosPromise<TeacherDto> {
            return localVarFp.updateTeachers(teacherID, teacherDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: number, userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updateUser(id, userDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add new Admissions
     * @param {AdmissionDto} admissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAdmissions(admissionDto: AdmissionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addAdmissions(admissionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Rooms
     * @param {RoomDto} roomDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addRooms(roomDto: RoomDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addRooms(roomDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Schedule
     * @param {ScheduleDto} scheduleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSchedule(scheduleDto: ScheduleDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSchedule(scheduleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Subject
     * @param {SubjectDto} subjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addSubject(subjectDto: SubjectDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addSubject(subjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Teachers
     * @param {TeacherDto} teacherDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addTeachers(teacherDto: TeacherDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addTeachers(teacherDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new user
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUser(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addUser(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Admissions by id
     * @param {number} admissionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAdmissions(admissionID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAdmissions(admissionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Schedules by id
     * @param {number} scheduleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteOneSchedule(scheduleID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteOneSchedule(scheduleID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Subjects by id
     * @param {number} subjectID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteOneSubject(subjectID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteOneSubject(subjectID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Rooms by id
     * @param {number} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteRoom(roomID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteRoom(roomID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Teachers by id
     * @param {number} teacherID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTeacher(teacherID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTeacher(teacherID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete user by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Admissions by id
     * @param {number} admissionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmission(admissionID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmission(admissionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Admissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAdmissions(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAdmissions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Schedules
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllSchedules(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllSchedules(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Subjects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAllSubjects(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAllSubjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Rooms by id
     * @param {number} roomID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRoom(roomID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRoom(roomID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Rooms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRooms(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getRooms(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Schedules by id
     * @param {number} scheduleID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSchedule(scheduleID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSchedule(scheduleID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Subjects by id
     * @param {number} subjectID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSubject(subjectID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSubject(subjectID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Teachers by id
     * @param {number} teacherID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTeacher(teacherID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTeacher(teacherID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Teachers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTeachers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTeachers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login User
     * @param {string} username 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(username: string, password: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshToken(refreshDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Admission by id
     * @param {number} admissionID 
     * @param {AdmissionDto} admissionDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAdmissions(admissionID: number, admissionDto: AdmissionDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAdmissions(admissionID, admissionDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Rooms by id
     * @param {number} roomID 
     * @param {RoomDto} roomDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateRoom(roomID: number, roomDto: RoomDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateRoom(roomID, roomDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Schedules by id
     * @param {number} scheduleID 
     * @param {ScheduleDto} scheduleDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSchedule(scheduleID: number, scheduleDto: ScheduleDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSchedule(scheduleID, scheduleDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Subjects by id
     * @param {number} subjectID 
     * @param {SubjectDto} subjectDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSubject(subjectID: number, subjectDto: SubjectDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateSubject(subjectID, subjectDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Teachers by id
     * @param {number} teacherID 
     * @param {TeacherDto} teacherDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTeachers(teacherID: number, teacherDto: TeacherDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateTeachers(teacherID, teacherDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user by id
     * @param {number} id 
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(id: number, userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUser(id, userDto, options).then((request) => request(this.axios, this.basePath));
    }
}


